Dual pitch shifter
Pot 1: pitch 1
Pot 2: pitch 2
Pot 3: dry/wet blend

Intervals -1 Octave, -m7th, -M6th, -5th, -4th, -M3rd, -M2nd, Off, +m2nd, +M2nd, +M3rd, +4th, +5th, +M6th, +m7th, +1 Octave

Code:
const int pitches[16] = {8192, 9195, 9741, 10935, 12274, 13003, 14596, 0, 17358, 18390, 20642, 21870, 24548, 27554, 29192, 32767};

sample1 = pitchshift(pitches[pot1 >> 11], sample);
sample2 = pitchshift2(pitches[pot2 >> 11], sample);
sample = blend(pot3, sample, add(sample1, sample2));

Sample and hold low pass filter
Pot 1: range
Pot 2: resonance
Pot 3: speed

Code:
sample = svf((random_lfo(pot3)>> 1) + (pot1 >> 1), pot2, lp, sample);

Octaver
Pot 1: -1 Octave level
Pot 2: +1 Octave level
Pot 3: dry level

Code:
sample1 = mulx(pot1, pitchshift(8192, sample));
sample1 = lowpass(10632, sample1);
sample2 = mulx(pot2, pitchshift2(32767, sample));
sample = mulx(pot3, sample);
sample1 = add(sample1, sample2);
sample = add(sample, sample1);

Two second delay
Pot 1: Feedback
Pot 2: Dry/wet blend
Pot 3: Delay time

Code:
sample1 = add(sample, mulx(pot1, sample1));
sample1 = delayline(131072, pot3 << 2, 0, sample1);
sample = blend(pot2, sample, sample1);

Simple ring modulator
Pot 1:
Pot 2:
Pot 3: Frequency

Code:
sample = mulx(vco(logpot(pot3)),sample);

2 second reverse delay line
Pot 1:
Pot 2:
Pot 3: Delay time

Code:
sample = revdelay(131072, pot3 << 2, sample);

Stupid looper thing
Pot 1: Repeats
Pot 2: dry/wet blend
Pot 3: sample time

Code:

   static long tri_counter = 0;
    static long int tri = 0;
    int tri_out = 0;
    static int trigger = 0;
    static long delay_counter = 0;
    static int repeats = 0;
    static int channel = 0;

    tri_counter = tri_counter + pot3;
    if (tri_counter > 32767) {
        tri_counter = tri_counter & 32767;
        tri = (tri + 64) & 65535;
        trigger = trigger + 1;

    }
    tri_out = tri - 32767;
    if (tri_out > 0)
        tri_out = ~tri_out;
    tri_out = tri_out + 32767;

    if (trigger == 1023) {
        trigger = 0;
        delay_counter = 0;
        repeats = repeats + 1;

    }

    sample1 = sample;

    if (channel == 0) {


        sram_write(delay_counter + 65535, sample);
        sample = sram_read(delay_counter);
    }
    else {

          sram_write(delay_counter, sample);
        sample = sram_read(delay_counter + 65535);
    }

    delay_counter = delay_counter + 2;


    if (repeats > (pot1 >> 10)) {
        channel = ~channel;
        repeats = 0;
    }

    LED = channel;

    sample = mulx(tri_out, sample);

    sample = blend(pot2, sample1, sample);

Reverb

static int delay0[4096];
    static int delay1[1024];
    static int delay2[512];
    static int delay3[128];

    static int delay0_in = 0;
    static int delay1_in = 0;
    static int delay2_in = 0;
    static int delay3_in = 0;
    int feedback = 0;
    int delay0_out = 0;
    int delay1_out = 0;
    int delay2_out = 0;
    int delay3_out = 0;
    static int delay_writeaddress = 0;

    delay_writeaddress++;

    feedback = (sample >> 3) + mulx(pot1, crossfade(pot3, sample1,pitchshift(32767,sample1)));

    delay0_out = delay0[(delay_writeaddress + 4096 - 3299) & 4095];
    delay0_in = (delay0_out >> 1) + feedback;
    delay0[delay_writeaddress & 4095] = delay0_in;
    sample1 = delay0_out - (delay0_in >> 1);

    delay1_out = delay1[(delay_writeaddress + 1024 - 991) & 1023];
    delay1_in = (delay1_out >> 1) + sample1;
    delay1[delay_writeaddress & 1023] = delay1_in;
    sample1 = delay1_out - (delay1_in >> 1);

    delay2_out = delay2[(delay_writeaddress + 512 - 353) & 511];
    delay2_in = (delay2_out >> 1) + sample1;
    delay2[delay_writeaddress & 511] = delay2_in;
    sample1 = delay2_out - (delay2_in >> 1);

    delay3_out = delay3[(delay_writeaddress + 128 - 97) & 127];
    delay3_in = (delay3_out >> 1) + sample1;
    delay3[delay_writeaddress & 127] = delay3_in;
    sample1 = delay3_out - (delay3_in >> 1);

    sample = blend(pot2, sample, (sample1 << 3));
